package test_option_annotation_reference;

import "test_annotations.proto";

@Name(value="Car")
@Local(self=Car, local_enum=Gender, nested=Part, nested_enum=Condition, deeper=Part.Tire, 
  gender = Gender.MALE)
@Imported(imported_message=Person, imported_enum=Person.Gender, 
  gender = Person.Gender.FEMALE)
@FQCN(fqcn_message=test_annotations.Person.ListRequest, fqcn_enum=test_annotations.Person.Gender)
message Car {

  // resolved if -Dprotostuff.resolve_enum_value_ref=true
  option local_gender = Gender.MALE;
  option imported_gender = Person.Gender.FEMALE;

  option name = "Car";
  option self = Car;
  option local_enum = Gender;
  option nested = Part;
  option nested_enum = Condition;
  option deeper = Part.Tire;
  
  option imported_message = Person;
  option imported_enum = Person.Gender;
  
  option fqcn_message = test_annotations.Person.ListRequest;
  option fqcn_enum = test_annotations.Person.Gender;
  
  required int32 id = 1 [
    self = Car,
    local_enum = Gender,
    nested = Part,
    nested_enum = Condition,
    deeper = Part.Tire,
  
    imported_message = Person,
    imported_enum = Person.Gender,
  
    fqcn_message = test_annotations.Person.ListRequest,
    fqcn_enum = test_annotations.Person.Gender
  ];

  optional Gender local = 2 [local_enum=Gender, local_nested_message=Car.Part];
  optional Person.Gender imported = 3 [imported_enum=Person.Gender, imported_nested_message=Person.ListRequest];
  optional Condition condition = 4 [owner = Car, req = false];

  @Owner(type=Car)
  message Part {
    option owner = Car;
  
    required int32 id = 1;
  
    message Tire {
      
      required int32 id = 1;
    
    }
  }
  
  @Owner(type=Car)
  enum Condition {
    option owner = Car;
    
    BRAND_NEW = 1;
    NEEDS_TUNEUP = 2;
    NEEDS_TIRE_CHANGE = 3;
    JUNK_MATERIAL = 4;
  }
}

enum Gender {
  FEMALE = 1;
  MALE = 2 [
    self = Car,
    local_enum = Gender,
    nested = Car.Part,
    nested_enum = Car.Condition,
    deeper = Car.Part.Tire,
  
    imported_message = Person,
    imported_enum = Person.Gender,
  
    fqcn_message = test_annotations.Person.ListRequest,
    fqcn_enum = test_annotations.Person.Gender
  ];
}

@A(public = true, target = Car)
service CarService {
  option public = true;
  option target = Car;

  @A(throttle = false, might_wanna_specify = Car.Condition)
  rpc getMostRecentCar (void) returns (Car) {
    option throttle = false;
    option might_wanna_specify = Car.Condition;
  };

}

