// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from group.proto

package com.dyuproject.protostuff.me;

import java.io.IOException;

import com.dyuproject.protostuff.me.ByteString;
import com.dyuproject.protostuff.me.GraphIOUtil;
import com.dyuproject.protostuff.me.Input;
import com.dyuproject.protostuff.me.Message;
import com.dyuproject.protostuff.me.Output;
import com.dyuproject.protostuff.me.Schema;

public final class ClubFounder implements Message, Schema
{

    public static Schema getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ClubFounder getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ClubFounder DEFAULT_INSTANCE = new ClubFounder();

    
    private String name;
    private Club club;

    public ClubFounder()
    {
        
    }

    // getters and setters

    // name

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    // club

    public Club getClub()
    {
        return club;
    }

    public void setClub(Club club)
    {
        this.club = club;
    }

    // message method

    public Schema cachedSchema()
    {
        return this;
    }

    // schema methods

    public Object /*ClubFounder*/ newMessage()
    {
        return new ClubFounder();
    }

    public Class typeClass()
    {
        return ClubFounder.class;
    }

    public String messageName()
    {
        return ClubFounder.class.getName();
    }

    public String messageFullName()
    {
        return ClubFounder.class.getName();
    }

    public boolean isInitialized(Object /*ClubFounder*/ message)
    {
        return true;
    }

    public void mergeFrom(Input input, Object /*ClubFounder*/ messageObj) throws IOException
    {
        ClubFounder message = (ClubFounder)messageObj;
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.name = ByteString.stringDefaultValue(input.readString());
                    break;
                case 2:
                    message.club = (Club)input.mergeObject(message.club, Club.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }

    public void mergeFrom(Object /*ClubFounder*/ messageObj)
    {
        ClubFounder message = (ClubFounder)messageObj;
        this.name = message.name;
        if(message.club == null) {
            this.club = null;
        } else {
            this.club = (Club)message.club.newMessage();
            this.club.mergeFrom((Club)message.club);
        }
    }


    public void writeTo(Output output, Object /*ClubFounder*/ messageObj) throws IOException
    {
        ClubFounder message = (ClubFounder)messageObj;
        if(message.name != null)
            output.writeString(1, message.name, false);

        if(message.club != null)
             output.writeObject(2, message.club, Club.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
